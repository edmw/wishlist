#!/usr/bin/env ruby

require 'xcodeproj'

project = Xcodeproj::Project.open('Wishlist.xcodeproj')

def addfiles (direc, current_group, target)
    Dir.glob(direc) do |item|
        next if item == '.' or item == '.DS_Store'
        if File.directory?(item)
            new_folder = File.basename(item)
            created_group = current_group.new_group(new_folder)
            addfiles("#{item}/*", created_group, target)
        else 
          i = current_group.new_file(item)
          if item.include? ".swift"
              target.add_file_references([i])
          end
        end
    end
end

# Add tooling
targets_for_sourcery = project.native_targets.select { |x| x.name == 'Tooling' }
targets_for_sourcery.each do |target|
  # add files
  sources_group = project.main_group.find_subpath("Sources", false)
  tooling_group = sources_group.find_subpath("Tooling", true)
  templates_group = tooling_group.find_subpath("AutoGenerated", true)
  addfiles("./Sources/Tooling/AutoGenerated/*", templates_group, target)
  # add linting
  phase = target.new_shell_script_build_phase()
  phase.name = "Lint Sources ..."
  phase.shell_script = %Q(
    if which swiftlint >/dev/null; then
      swiftlint --config .swiftlint.yml lint ./Sources/
    else
      echo "warning: SwiftLint not installed!"
    fi
  )
  target.build_phases.move(phase, 0)
  # add generating
  phase = target.new_shell_script_build_phase()
  phase.name = "Generate Sources ..."
  phase.shell_script = %Q(
    if which sourcery >/dev/null; then
      sourcery --sources "./Sources/Domain"/  --templates "./Sources/Tooling/AutoGenerated/Domain"/ --output "./Sources/Domain/[AutoGenerated]"/
    else
      echo "error: Sourcery not installed!"
    fi
  )
  target.build_phases.move(phase, 0)
end

# Sort build phases
target_name = 'App'
targets_to_sort = project.native_targets.select { |x| x.name == target_name || target_name.nil? }
phases_to_sort = [Xcodeproj::Project::Object::PBXSourcesBuildPhase, Xcodeproj::Project::Object::PBXCopyFilesBuildPhase, Xcodeproj::Project::Object::PBXResourcesBuildPhase]
targets_to_sort.each do |target|
  phases_to_sort.each do |phase_to_sort|
    target.build_phases.select { |x| x.class == phase_to_sort }.each do |phase|
      phase.files.sort! { |l, r| l.display_name <=> r.display_name }
    end
  end
end

sources_group = project.groups.find do |group|
    group.name == "Sources"
end
sources_group.sort_recursively_by_type()

project.save()

