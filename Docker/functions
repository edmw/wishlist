check_version() {
    if [[ ! -d "./$project.xcodeproj" ]] ; then
      echo "🤔 Script must be run in project directory ..."; exit 1
    fi
    if [[ ! $version =~ ^[0-9]+(\.[0-9]+){2,2}(\-RC[0-9]+){0,1}$ ]];
    then
      echo "🤔 Script must be run with version number as argument ..."; exit 1
    fi
}

check_version_and_mode() {
    if [[ ! -d "./$project.xcodeproj" ]] ; then
      echo "🤔 Script must be run in project directory ..."; exit 1
    fi
    if [[ ! $version =~ ^[0-9]+(\.[0-9]+){2,2}(\-RC[0-9]+){0,1}$ ]];
    then
      echo "🤔 Script must be run with version number as first argument ..."; exit 1
    fi
    if [[ ! $mode =~ ^prod|dev$ ]] ; then
      echo "🤔 Script must be run with mode (prod, dev) as second argument ..."; exit 1
    fi
}

docker_build_swift () {
    echo "🐳 BUILDING IMAGE: Swift for $project"

    docker_in="$(cat <<-EOF
FROM swift:5.1.4
RUN apt-get -qq update \
    && apt-get -q -y install \
        libssl-dev \
        openssl \
        tzdata \
        zlib1g-dev \
    && rm -r /var/lib/apt/lists/*
RUN mkdir -p /build/lib && cp -R /usr/lib/swift/linux/lib* /build/lib
EOF
    )"
    out=$(echo "$docker_in" | docker build - -t "$label:swift" 2>&1)
    [ $? -ne 0 ] \
        && echo "$out" \
        && echo "⛔ Docker build command failed!" \
        && exit 1

    image=$(docker image ls | grep -E "^$label\s+swift " | tr -s ' ' | cut -d' ' -f 1,2,3)
    echo "😎 BUILD IMAGE: $image"
}

check_image() {
    image=$(docker image ls | grep " $1 " | tr -s ' ' | cut -d' ' -f 3)
    [ -z "$image" ] \
        && echo "⛔ Image not found for version $1!" \
        && echo "💡 Run build command first ..." \
        && exit 1
}

check_tagged_image() {
    image=$(docker image ls | grep "$1\-$2 " | tr -s ' ' | cut -d' ' -f 1,2,3)
    [ -z "$image" ] \
        && echo "⛔ Image not found for label $1 and version $2!" \
        && echo "💡 Run build command first ..." \
        && echo "💡 Run tag command next ..." \
        && exit 1
}
