{% for entity in types.implementing.AutoFluentEntity %}
{% set typePrefix %}Fluent{% endset %}
{% set typeName %}{{typePrefix}}{{entity.name}}{% endset %}
// sourcery:inline:{{typeName}}.AutoFluentEntity
// swiftlint:disable superfluous_disable_command
// swiftlint:disable cyclomatic_complexity
{% set entityID %}id{% endset %}
{% set entityKey %}uuid{% endset %}
{% set parentEntity %}{{entity.annotations.AutoFluentEntityParent}}{% endset %}
{% set parentEntityID %}{{parentEntity|lowercase}}ID{% endset %}
{% set parentEntityKey %}{{parentEntity|lowercase}}Key{% endset %}
{% set childrenEntity %}{{entity.annotations.AutoFluentEntityChildren}}{% endset %}
{% set childrenEntityID %}{{childrenEntity|lowercase}}ID{% endset %}
{% set childrenEntityKey %}{{childrenEntity|lowercase}}Key{% endset %}
{% set leftEntity %}{{entity.annotations.AutoFluentEntityPivotLeft}}{% endset %}
{% set leftEntityID %}{{leftEntity|lowercase}}ID{% endset %}
{% set leftEntityKey %}{{leftEntity|lowercase}}Key{% endset %}
{% set rightEntity %}{{entity.annotations.AutoFluentEntityPivotRight}}{% endset %}
{% set rightEntityID %}{{rightEntity|lowercase}}ID{% endset %}
{% set rightEntityKey %}{{rightEntity|lowercase}}Key{% endset %}
{% set relatedEntity %}{{entity.annotations.AutoFluentEntityRelation}}{% endset %}
{% set relatedEntityID %}{{relatedEntity|lowercase}}ID{% endset %}
{% set relatedEntityKey %}{{relatedEntity|lowercase}}Key{% endset %}
{% macro key_for variable %}{% if variable.name == entityID %}uuid{% else %}{{variable.name|replace:"ID","Key"}}{% endif %}{% endmacro %}
{% macro type_for variable %}{{variable.typeName|replace:"?",""}}{% endmacro %}

// MARK: DO NOT EDIT

import Domain

import Vapor
import Fluent
import FluentMySQL

// MARK: {{typeName}}

/// This generated type is based on the Domainâ€˜s {{entity.name}} model type and is used for
/// storing data into and retrieving data from a SQL database using Fluent.
///
/// The Domain builds relations between models using model identifiers (UserID, ListID, ...).
/// This will translate model identifiers to UUIDs and vice versa to handle relations using UUIDs.
public struct {{typeName}}: {{entity.name}}Model,
    Fluent.Model,
    Fluent.Migration{% if entity.annotations.AutoFluentEntityPivot %},
    Fluent.ModifiablePivot{% endif %},
    Equatable
{
    // MARK: Fluent.Model

    public typealias Database = MySQLDatabase
    public typealias ID = UUID
    public static let idKey: IDKey = \.{{entityKey}}
    public static let name = "{{entity.name}}"
    public static let migrationName = "{{entity.name}}"

{% for variable in entity.storedVariables %}
  {% if variable.isLazy == false %}
    {% if variable.name == entityID
        or variable.name == parentEntityID
        or variable.name == leftEntityID
        or variable.name == rightEntityID
        or variable.name == relatedEntityID
    %}
      {% set key %}{% call key_for variable %}{% endset %}
      {% set type %}{% call type_for variable %}{% endset %}
    public var {{key}}: UUID{% if variable.isOptional %}?{% endif %}
    public var {{variable.name}}: {{variable.typeName}} { {{type}}(uuid: {{key}}) }
    {% else %}
    public var {{variable.name}}: {{variable.typeName}}
    {% endif %}
  {% endif %}
{% endfor %}

    /// Initializes a SQL layer's `{{typeName}}`. Usually not called directly.
    /// To create this object a getter `model` is provided on the Domain entity `{{entity.name}}`.
    init(
{% for variable in entity.storedVariables %}
  {% if variable.isLazy == false %}
    {% if variable.name == entityID
        or variable.name == parentEntityID
        or variable.name == leftEntityID
        or variable.name == rightEntityID
        or variable.name == relatedEntityID
    %}
    {% set key %}{% call key_for variable %}{% endset %}
        {{key}}: UUID{% if variable.isOptional %}?{% endif %}{% if not forloop.last %},{% endif %}
    {% else %}
        {{variable.name}}: {{variable.typeName}}{% if not forloop.last %},{% endif %}
    {% endif %}
  {% endif %}
{% endfor %}
    ) {
{% for variable in entity.storedVariables %}
  {% if variable.isLazy == false %}
    {% if variable.name == entityID
        or variable.name == parentEntityID
        or variable.name == leftEntityID
        or variable.name == rightEntityID
        or variable.name == relatedEntityID
    %}
    {% set key %}{% call key_for variable %}{% endset %}
        self.{{key}} = {{key}}
    {% else %}
        self.{{variable.name}} = {{variable.name}}
    {% endif %}
  {% endif %}
{% endfor %}
    }

    enum CodingKeys: String, CodingKey {
{% for variable in entity.storedVariables %}
  {% if variable.isLazy == false %}
    {% if variable.name == entityID
        or variable.name == parentEntityID
        or variable.name == leftEntityID
        or variable.name == rightEntityID
        or variable.name == relatedEntityID
    %}
    {% set key %}{% call key_for variable %}{% endset %}
        case {{key}} = "{{variable.name}}"
    {% else %}
        case {{variable.name}}
    {% endif %}
  {% endif %}
{% endfor %}
    }

{% if entity.annotations.AutoFluentEntityPivot %}
    // MARK: Fluent.Pivot

    {% set lname %}{{entity.annotations.AutoFluentEntityPivotLeft|lowercase}}{% endset %}
    {% set rname %}{{entity.annotations.AutoFluentEntityPivotRight|lowercase}}{% endset %}
    public typealias Left = {{typePrefix}}{{leftEntity}}
    public typealias Right = {{typePrefix}}{{rightEntity}}

    public static var leftIDKey: LeftIDKey = \{{typeName}}.{{leftEntityKey}}
    public static var rightIDKey: RightIDKey = \{{typeName}}.{{rightEntityKey}}

    public init(_ left: {{typePrefix}}{{leftEntity}}, _ right: {{typePrefix}}{{rightEntity}}) throws {
        guard let leftid = left.id else {
            throw {{typeName}}Error.required{{leftEntity}}IDMissing
        }
        guard let rightid = right.id else {
            throw {{typeName}}Error.required{{rightEntity}}IDMissing
        }
        self.{{leftEntityKey}} = leftid.uuid
        self.{{rightEntityKey}} = rightid.uuid
    }

{% endif %}
    // MARK: Fluent.Migration

    public static func prepare(on connection: Database.Connection) -> EventLoopFuture<Void> {
        return Database.create(self, on: connection) { builder in
{% for variable in entity.storedVariables %}
  {% if variable.isLazy == false %}
    {% if variable.name == entityID
        or variable.name == parentEntityID
        or variable.name == leftEntityID
        or variable.name == rightEntityID
        or variable.name == relatedEntityID
    %}
    {% set key %}{% call key_for variable %}{% endset %}
            builder.field(for: \.{{key}})
      {% if entity.annotations.AutoFluentEntityUniqueFields %}
        {% if entity.annotations.AutoFluentEntityUniqueFields|contains: variable.name %}
            builder.unique(on: \.{{key}})
        {% endif %}
      {% endif %}
    {% else %}
            builder.field(for: \.{{variable.name}})
      {% if entity.annotations.AutoFluentEntityUniqueFields %}
        {% if entity.annotations.AutoFluentEntityUniqueFields|contains: variable.name %}
            builder.unique(on: \.{{variable.name}})
        {% endif %}
      {% endif %}
    {% endif %}
{% endif %}
{% endfor %}
{% if parentEntity %}
  {% if entity.annotations.AutoFluentEntityParentOnDeleteCascade %}
            builder.reference(from: \.{{parentEntityKey}}, to: \{{typePrefix}}{{parentEntity}}.uuid, onDelete: .cascade)
  {% else %}
            builder.reference(from: \.{{parentEntityKey}}, to: \{{typePrefix}}{{parentEntity}}.uuid)
  {% endif %}
{% endif %}
        }
    }

{% if parentEntity or childrenEntity %}
    // MARK: Relations

{% if parentEntity %}
    var {{parentEntity|lowercase}}: Parent<{{typeName}}, {{typePrefix}}{{parentEntity}}> {
        return parent(\{{typeName}}.{{parentEntityKey}})
    }

    func require{{parentEntity}}(on container: Container) throws -> EventLoopFuture<{{parentEntity}}> {
        return container.withPooledConnection(to: .mysql) { connection in
            return self.{{parentEntity|lowercase}}.get(on: connection).mapToEntity()
        }
    }

{% endif %}
{% if childrenEntity %}
    var {{childrenEntity|lowercase}}s: Children<{{typeName}}, {{typePrefix}}{{childrenEntity}}> {
        return children(\{{typePrefix}}{{childrenEntity}}.{{entity.name|lowercase}}Key)
    }

{% endif %}
{% endif %}
    // MARK: Equatable

    public static func == (lhs: {{typeName}}, rhs: {{typeName}}) -> Bool {
{% for variable in entity.storedVariables %}
  {% if variable.isLazy == false %}
    {% if variable.name == entityID
        or variable.name == parentEntityID
        or variable.name == leftEntityID
        or variable.name == rightEntityID
        or variable.name == relatedEntityID
    %}
    {% set key %}{% call key_for variable %}{% endset %}
        guard lhs.{{key}} == rhs.{{key}} else {
            return false
        }
    {% else %}
        guard lhs.{{variable.name}} == rhs.{{variable.name}} else {
            return false
        }
    {% endif %}
  {% endif %}
{% endfor %}
        return true
    }

}

{% set needsErrorType %}{{entity.annotations.AutoFluentEntityPivot}}{% endset %}
{% if needsErrorType %}
enum {{typeName}}Error: Error {
{% if entity.annotations.AutoFluentEntityPivot %}
{% set ltype %}{{entity.annotations.AutoFluentEntityPivotLeft}}{% endset %}
{% set rtype %}{{entity.annotations.AutoFluentEntityPivotRight}}{% endset %}
    case required{{ltype}}IDMissing
    case required{{rtype}}IDMissing
{% endif %}
}

{% endif %}
{% if entity.annotations.AutoFluentEntityPivot %}
// MARK: Siblings

    {% set ltype %}{{entity.annotations.AutoFluentEntityPivotLeft}}{% endset %}
    {% set lname %}{{entity.annotations.AutoFluentEntityPivotLeft|lowercase}}{% endset %}
    {% set rtype %}{{entity.annotations.AutoFluentEntityPivotRight}}{% endset %}
    {% set rname %}{{entity.annotations.AutoFluentEntityPivotRight|lowercase}}{% endset %}
extension {{typePrefix}}{{ltype}} {

    // this {{ltype}}'s {{entity.name|lowercase}} {{rname}}s
    var {{entity.name|lowercase}}s: Siblings<{{typePrefix}}{{ltype}}, {{typePrefix}}{{rtype}}, {{typeName}}> {
        return siblings()
    }

}

extension {{typePrefix}}{{rtype}} {

    // all {{ltype}}s that {{entity.name|lowercase}} this {{rname}}
    var {{lname}}s: Siblings<{{typePrefix}}{{rtype}}, {{typePrefix}}{{ltype}}, {{typeName}}> {
        return siblings()
    }

}

{% endif %}
// MARK: - {{entity.name}}

extension {{entity.name}} {

    var model: {{typeName}} {
        return .init(
{% for variable in entity.storedVariables %}
  {% if variable.isLazy == false %}
    {% if variable.name == entityID
        or variable.name == parentEntityID
        or variable.name == leftEntityID
        or variable.name == rightEntityID
        or variable.name == relatedEntityID
    %}
    {% set key %}{% call key_for variable %}{% endset %}
            {{key}}: {{variable.name}}{% if variable.isOptional %}?{% endif %}.uuid{% if not forloop.last %},{% endif %}
    {% else %}
            {{variable.name}}: {{variable.name}}{% if not forloop.last %},{% endif %}
    {% endif %}
  {% endif %}
{% endfor %}
        )
    }

}

// MARK: - EventLoopFuture

extension EventLoopFuture where Expectation == {{typeName}} {

    /// Maps this futureâ€˜s expectation from an SQL layer's `{{typeName}}`
    /// to the Domain entity `{{entity.name}}`.
    func mapToEntity() -> EventLoopFuture<{{entity.name}}> {
        return self.map { model in
            return {{entity.name}}(from: model)
        }
    }

}

extension EventLoopFuture where Expectation == {{typeName}}? {

    /// Maps this futureâ€˜s expectation from an SQL layer's optional `{{typeName}}`
    /// to the optional Domain entity `{{entity.name}}`.
    func mapToEntity() -> EventLoopFuture<{{entity.name}}?> {
        return self.map { model in
            guard let model = model else {
                return nil
            }
            return {{entity.name}}(from: model)
        }
    }

}

extension EventLoopFuture where Expectation == [{{typeName}}] {

    /// Maps this futureâ€˜s expectation from an array of SQL layer's `{{typeName}}`s
    /// to an array of the Domain entities `{{entity.name}}`s.
    func mapToEntities() -> EventLoopFuture<[{{entity.name}}]> {
        return self.map { models in
            return models.map { model in {{entity.name}}(from: model) }
        }
    }

}

// sourcery:end
{% endfor %}
