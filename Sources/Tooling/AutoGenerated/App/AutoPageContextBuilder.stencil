{% for type in types.implementing.AutoPageContextBuilder %}
{% macro builder_methodname_for_parameter parameter %}{% if parameter.typeName.name == "Bool" %}{{parameter.name}}{% else %}{% if parameter.isOptional %}with{% else %}for{% endif %}{{parameter.name|upperFirstLetter|replace:"Context",""}}{% endif %}{% endmacro %}
// sourcery:inline:{{type.name}}Builder.AutoPageContextBuilder

// MARK: DO NOT EDIT
{#
This template can be used to generate a builder type for a page context type.

How to enable: Conform any page context type to `AutoPageContextBuilder`

Example:
```
struct FavoritesPageContext: Encodable, AutoPageContextBuilder ...
```

Generated code will be a builder type `FavoritesPageContextBuilder`.
#}

import Domain

import Foundation

// MARK: {{type.name}}

extension {{type.name}} {

    static var builder: {{type.name}}Builder {
        return {{type.name}}Builder()
    }

}

enum {{type.name}}BuilderError: Error {
{% for initializer in type.initializers where initializer|annotated:"AutoPageContextBuilderInitializer" %}
{% for parameter in initializer.parameters %}
  {% if parameter.isOptional == false %}
  case missingRequired{{parameter.name|upperFirstLetter}}
  {% endif %}
{% endfor %}
{% endfor %}
}

class {{type.name}}Builder {

    var actions = PageActions()

{% for initializer in type.initializers where initializer|annotated:"AutoPageContextBuilderInitializer" %}
{% for parameter in initializer.parameters %}
    var {{parameter.name}}: {{parameter.typeName}}{% if parameter.typeName.name == "Bool" %} = {% if parameter.defaultValue %}{{parameter.defaultValue}}{% else %}HELLO{% endif %}{% else %}{% if parameter.isOptional == false %}?{% endif %}{% endif %}
{% endfor %}
{% endfor %}
{% for initializer in type.initializers where initializer|annotated:"AutoPageContextBuilderInitializer" %}
{% for parameter in initializer.parameters %}

    @discardableResult
    func {% call builder_methodname_for_parameter parameter %}(_ {{parameter.name}}: {{parameter.typeName}}) -> Self {
        self.{{parameter.name}} = {{parameter.name}}
        return self
    }
{% endfor %}
{% endfor %}

    @discardableResult
    func setAction(_ key: String, _ action: PageAction) -> Self {
        self.actions[key] = action
        return self
    }

    func build() throws -> {{type.name}} {
      {% for initializer in type.initializers where initializer|annotated:"AutoPageContextBuilderInitializer" %}
      {% for parameter in initializer.parameters %}
        {% if parameter.isOptional == false and parameter.typeName.name != "Bool" %}
        guard let {{parameter.name}} = {{parameter.name}} else {
            throw {{type.name}}BuilderError.missingRequired{{parameter.name|upperFirstLetter}}
        }
        {% endif %}
      {% endfor %}
        var context = {{type.name}}(
        {% for parameter in initializer.parameters %}
            {{parameter.argumentLabel}}: {{parameter.name}}{% if not forloop.last %},{% endif %}
        {% endfor %}
        )
        context.actions = actions
        return context
      {% endfor %}
    }

}
// sourcery:end
{% endfor %}
