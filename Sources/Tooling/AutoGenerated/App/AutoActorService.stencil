{% for type in types.implementing.Actor where type.implements.Driver %}
// sourcery:inline:{{type.name}}.AutoActorService

// MARK: DO NOT EDIT
{#
This template is been used to generate the necessary code for an Actor type
so it can be used as a Vapor Service type.

Note: Relies on the convention that the actual implementation of an Actor type
is named after the actor protocol it implements prefixed with "Domain".

How to enable: Conform any Actor type to protocol `Driver`

Example:
```
extension DomainAnnouncementsActor: Driver {}
```

Generated code:
```
extension DomainAnnouncementsActor: ServiceType {

    // MARK: Service

    public static let serviceSupports: [Any.Type] = [AnnouncementsActor.self]

    public static func makeService(for container: Container) throws -> Self {
        return try .init(
            userRepository: container.make()
        )
    }

}
```
#}

import Domain

import Vapor

// MARK: {{type.name}}

/// Adapter for the domain layers `{{type.name}}` to be used with Vapor.
///
/// This adds the functionality needed that this actor can be injected by Vaporâ€˜s dependency
/// injection framework.
extension {{type.name}}: ServiceType {

    // MARK: Service

    public static let serviceSupports: [Any.Type] = [{{type.name|replace:"Domain",""}}.self]

    public static func makeService(for container: Container) throws -> Self {
        {% for initializer in type.initializers %}
            {% if initializer.isRequired %}
        return try .init(
        {% for parameter in initializer.parameters %}
            {{parameter.name}}: container.make(){% if not forloop.last %},{% endif %}
        {% endfor %}
        )
            {% endif %}
        {% endfor %}
    }

}
// sourcery:end
{% endfor %}
